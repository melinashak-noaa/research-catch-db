openapi: 3.0.1
info:
  title: Research Catch API [DEV ONLY]
  description: Server to provide REST API for postgres DB
  version: 1.0.1
servers:
  - url: /rcat/api/v1
tags:
  - name: Permits
    description: Permit Management
  - name: Catch
    description: Catch Data Management
  - name: Grouping Management
    description: Managing Groupings per Year
  - name: Reports
    description: Fetch Data for Catch Reports
  - name: Info Pull
    description: Various DB reads

paths:
  /permits:
    post:
      security:
        - bearerAuth: []
      tags:
        - Permits
      summary: Insert new permit into permit table
      operationId: postPermits
      requestBody:
        description: Need permit number, org name, either org id or new org, other fields are optional.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPermit'
            example:
                permit_number: 'SRP-01-2000'
                organization_name: 'NWFSC'
                project_name: 'Fishing for Science'
                permit_year: 2000
        required: true
      responses:
        '200':
          description: 'Permit row added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not add new permit to database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not find user_id in database.'
    put:
      security:
        - bearerAuth: []
      tags:
        - Permits
      summary: Update permit in permit table
      operationId: putPermits
      requestBody:
        description: Need research project (permit) id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permit'
            example:
                research_project_id: 123
                email: "seagull@gmail.com"
        required: true
      responses:
        '200':
          description: 'Permit row updated'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not update permit entry'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not find status_id in database.'
            
  /permits/{permitnum}:
    parameters:
      - in: path
        name: permitnum
        description: number of permit to be Deleted
        required: true
        schema:
          type: string
    delete:
      security:
        - bearerAuth: []
      tags:
        - Permits
      summary: Delete permit in permit table
      operationId: deletePermits
      responses:
        '200':
          description: 'Permit succesfully deleted'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not delete permit'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not delete permit'
  /permitsyearly:
    post:
      security:
        - bearerAuth: []
      tags:
        - Permits
      summary: Insert new permits for the year into permit table
      operationId: postPermitsYearly
      requestBody:
        description: Requires all expected permit fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPermitYear'
        required: true
      responses:
        '200':
          description: 'New permits added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not add new permits to database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not add new permits to database.'

  /groupmanage:
    post:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Add new year of grouping species entries
      operationId: postGroupManage
      requestBody:
        description: Need year of new groupings
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                year:
                  type: integer
            example:
              year: 2021
        required: true
      responses:
        '200':
          description: 'New grouping rows were successfully added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not add new groupings to database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not add new groupings for year 2021'
    get:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Get list of years that have grouping species entries
      operationId: getGroupManage
      responses:
        '200':
          description: 'Retrieved year list'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not retrieve year list'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve year list'

  /groupmanage/{gid}:
    parameters:
      - in: path
        name: gid
        description: grouping species ID number
        required: true
        schema:
          type: string
    delete:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Delete grouping species in grouping species table
      operationId: deleteGroupingSpecies
      responses:
        '200':
          description: 'Grouping Species succesfully deleted'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not delete grouping species'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not delete grouping species with id: 234'
        '403':
          description: 'Could not delete grouping species because catch data is using row'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 403
                message: 'Could not delete grouping species with id: 234, catch data is using this entry'
   
  /catch:
    post:
      security:
        - bearerAuth: []
      tags:
        - Catch
      summary: Add new catch data to a permit
      operationId: postCatch
      requestBody:
        description: Need research project (permit) id
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                research_project_id:
                  type: integer
                point_of_contact:
                  type: string
                catch_data:
                  type: array
                year:
                  type: integer
            example:
                research_project_id: 123
                point_of_contact: 'cod_stevens@noaa.gov'
                catch_data: {}
                year: 2020
        required: true
      responses:
        '200':
          description: 'Catch data was succesfully added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not add catch data to database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not find matching grouping_species_id in database'
    
  /catch/{pid}:
    parameters:
      - name: pid
        in: path
        description: research project id to retrieve catch data for.
        required: true
        schema:
          type: integer
    get:
      security:
        - bearerAuth: []
      tags:
        - Catch
      summary: retrieve catch data for particular permit
      operationId: getCatch
      responses:
        '200':
          description: 'Retrieved catch data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatchData'
        '400':
          description: 'Could not add catch data to database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not find matching grouping_species_id in database'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Catch
      summary: delete catch data for particular permit
      operationId: deleteCatch
      responses:
        '200':
          description: 'Deleted catch data'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not delete catch data'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not delete catch data'

  /catchgs:
    get:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: retrieve grouping species ids used in catch
      operationId: getCatchGs
      responses:
        '200':
          description: 'Retrieved catch grouping species ids'
          content:
            application/json:
              schema:
                type: object
                properties:
                  grouping_species_ids:
                    type: array
                    items:
                      type: integer        
        '400':
          description: 'Could not retrieve catch grouping species values from database'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve grouping species ids for catch in database'

  /permitid/{pnum}:
    parameters:
      - in: path
        name: pnum
        description: permit number.
        required: true
        schema:
          type: string
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve permit ID for given permit number
      operationId: getPermitid
      responses:
        '200':
          description: 'Retrieved permit ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  research_project_id:
                    type: integer
        '400':
          description: 'Could not retrieve permit ID'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve permit_id from database'

  /permitsview:
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve full list of permits
      operationId: getPermits
      responses:
        '200':
          description: 'Retrieved permit data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermitsData'
        '400':
          description: 'Could not retrieve permits'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve permits from database'

  /grouping:
    put:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Adds new grouping entries if they do not exist.
      operationId: putGroupings
      requestBody:
        description: Need grouping names
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupingData'
        required: true
      responses:
        '200':
          description: 'Grouping LU row/s added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not update grouping table'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not update grouping table'

  /grouping/{groupingid}/{year}:
    parameters:
      - in: path
        name: groupingid
        description: grouping id of deletion set
        required: true
        schema:
          type: integer
      - in: path
        name: year
        description: year
        required: true
        schema:
          type: integer
    delete:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: remove grouping species rows for a grouping/year set
      operationId: deleteGroupingSpecies
      responses:
        '200':
          description: 'Grouping records succesfully deleted'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not delete grouping records'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not delete grouping species records with grouping id: 234'
        '403':
          description: 'Could not delete grouping species rows because catch data is using row/s'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 403
                message: 'Could not delete grouping species rows with grouping id: 234, catch data are using entries'
   

  /grouping/{year}:
    parameters:
      - in: path
        name: year
        description: year
        required: true
        schema:
          type: integer
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve list of groupings for particular year
      operationId: getGroupings
      responses:
        '200':
          description: 'Retrieved groupings'
          content:
            application/json:
              schema:
                type: object
                properties:
                  grouping_name:
                    type: string
        '400':
          description: 'Could not retrieve groupings'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve groupings from database'

  /species/{year}:
    parameters:
      - in: path
        name: year
        description: year
        required: true
        schema:
          type: string
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve list of species for given year
      operationId: getSpecies
      responses:
        '200':
          description: 'Retrieved species'
          content:
            application/json:
              schema:
                type: object
                properties:
                  common_name:
                    type: string
        '400':
          description: 'Could not retrieve species'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve species from database'
   
  /speciesgrouping:
    post:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Add new species grouping rows
      operationId: postSpeciesGroupings
      requestBody:
        description: Need grouping_id and species_id, grouping_species_id will be autogenerated by DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSpeciesGroupingData'
        required: true
      responses:
        '200':
          description: 'New Species Grouping row/s added'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not update species grouping table'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not update species grouping table'
    put:
      security:
        - bearerAuth: []
      tags:
        - Grouping Management
      summary: Update species grouping table
      operationId: putSpeciesGroupings
      requestBody:
        description: Need grouping species data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesGroupingData'
        required: true
      responses:
        '200':
          description: 'Species Grouping row/s updated'
          content:
            text/plain:
              schema:
                type: 'string'
        '400':
          description: 'Could not update species grouping table'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not update species grouping table'

  /reports/report1/{yearstart}/{yearend}:
    parameters:
      - in: path
        name: yearstart
        description: start year for report
        required: true
        schema:
          type: integer
        example: 2019
      - in: path
        name: yearend
        description: end year for report
        required: true
        schema:
          type: integer
        example: 2020
    get:
      security:
        - bearerAuth: []
      tags: 
        - Reports
      summary: retrieve rows from report 1 view
      operationId: getReport1
      responses:
        '200':
          description: 'Retrieved report 1 data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report1Data'
        '400':
          description: 'Could not retrieve report 1'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve report 1 data from database'

  /reports/report2permits/{yearstart}/{yearend}:
    parameters:
      - in: path
        name: yearstart
        description: start year for report
        required: true
        schema:
          type: integer
        example: 2019
      - in: path
        name: yearend
        description: end year for report
        required: true
        schema:
          type: integer
        example: 2020
    get:
      security:
        - bearerAuth: []
      tags: 
        - Reports
      summary: retrieve ordered list of permit numbers
      operationId: getReport2
      responses:
        '200':
          description: 'Retrieved report 2 permit numbers'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    permit_number:
                      type: string
                    permit_year:
                      type: integer
        '400':
          description: 'Could not get report 2 permit numbers'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve report 2 permit numbers'
                
  /reports/report3/{yearstart}/{yearend}:
    parameters:
      - in: path
        name: yearstart
        description: start year for report
        required: true
        schema:
          type: integer
        example: 2019
      - in: path
        name: yearend
        description: end year for report
        required: true
        schema:
          type: integer
        example: 2020
    get:
      security:
        - bearerAuth: []
      tags: 
        - Reports
      summary: retrieve rows from report 3 view
      operationId: getReport3
      responses:
        '200':
          description: 'Retrieved report 3 data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportWCRData'
        '400':
          description: 'Could not report 3'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve report 3 data from database'

  /speciesgrouping/{year}:
    parameters:
      - in: path
        name: year
        description: year
        required: true
        schema:
          type: string
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve list of grouping species pairs for a given year
      operationId: getSpeciesGroupings
      responses:
        '200':
          description: 'Retrieved species groupings'
          content:
            application/json:
              schema:
                type: object
                properties:
                  grouping_name:
                    type: string
                  common_name:
                    type: string
        '400':
          description: 'Could not retrieve species grouping pairs'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve groupings/species from database'

  /depthgroupings:
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve list of grouping species pairs that have depth bins
      operationId: getDepthGroupings
      responses:
        '200':
          description: 'Retrieved grouping species with depth bins'
          content:
            application/json:
              schema:
                type: object
                properties:
                  grouping_name:
                    type: string
                  common_name:
                    type: string
        '400':
          description: 'Could not retrieve grouping species with depth bins'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve grouping species with depth bins from database'

  /orgnames:
    get:
      security:
        - bearerAuth: []
      tags:
        - Info Pull
      summary: retrieve list of organization names
      operationId: getOrgNames
      responses:
        '200':
          description: 'Retrieved organization names'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        '400':
          description: 'Could not retrieve organization names'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  status:
                    type: integer
                    format: int64
                  message:
                    type: string
              example:
                status: 400
                message: 'Could not retrieve org names from database'

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:    
    Permit:
      type: object
      required:
        - research_project_id
      properties:
        permit_number:
          type: string
        organization_name:
          type: string
          description: Required if newOrg not specified
        new_org:
          type: string
          description: Required if organizationName
        project_name:
          type: string
        permit_year:
          type: number
        start_date:
          type: string
        end_date:
          type: string
        mortality_credits_applicable:
          type: boolean
        point_of_contact:
          type: string
        email:
          type: string
        data_status_id:
          type: number
        issued_by:
          type: string
        principle_investigator:
          type: string
        notes:
          type: string
        staffNotes:
          type: string
        research_project_id:
          type: number
    NewPermit:
      type: object
      required:
        - permit_number
      properties:
        permit_number:
          type: string
        organization_name:
          type: string
          description: Required if newOrg not specified
        new_org:
          type: string
          description: Required if organizationName
        project_name:
          type: string
        permit_year:
          type: number
        start_date:
          type: string
        end_date:
          type: string
        mortality_credits_applicable:
          type: boolean
        email:
          type: string
          description: email of PI
        data_status_id:
          type: number
        issued_by:
          type: string
        principle_investigator:
          type: string
        notes:
          type: string
        staffNotes:
          type: string
    NewPermitYear:
      type: object
      required:
        - upload_data
      properties:
        upload_data:
          type: array
          items:
            type: object
            required:
              - permit_number
              - issued_by
              - principle_investigator
              - email
              - organization_name
              - project_name
              - permit_year
              - data_status_id
              - start_date
              - end_date
            properties:
              permit_number:
                type: string
              issued_by:
                type: string
              principle_investigator:
                type: string
              email:
                type: string
                description: email of PI
              organization_name:
                type: string
              project_name:
                type: string
              permit_year:
                type: number
              data_status_id:
                type: number
              start_date:
                type: string
              end_date:
                type: string
          example:
            [{permit_number: "SRP-02-2040", 
              issued_by: "Lynn Massey", 
              principle_investigator: "Seagull Wellington", 
              email: "seagull.wellington@noaa.gov", 
              organization_name: "NWFSC", 
              project_name: "Coastwide Prerecruit Survey of the Northern Seagull Population", 
              permit_year: 1999, 
              data_status_id: 2, 
              start_date: "Fri May 10 2019", 
              end_date: "Mon Jun 10 2019"}]
    SpeciesGroupingData:
      type: object
      required:
        - update_data
      properties:
        update_data:
          type: array
          items:
            type: object
            properties:
              grouping_species_id:
                type: integer
              grouping_name:
                type: string
              common_name:
                type: string
              south_boundary:
                type: number
                format: float
              north_boundary:
                type: number
                format: float
          example:
            [{grouping_species_id: 1456,
              grouping_name: "English sole",
              common_name: "British Sole",
              south_boundary: 43,
              north_boundary: 23},
             {grouping_species_id: 1455,
              grouping_name: "Groundfish unid",
              common_name: "British Groundfish"}]
    NewSpeciesGroupingData:
      type: object
      required:
        - update_data
      properties:
        update_data:
          type: array
          items:
            type: object
            properties:
              grouping_name:
                type: string
              common_name:
                type: string
              year:
                type: integer
              south_boundary:
                type: number
                format: float
              north_boundary:
                type: number
                format: float
          example:
            [{grouping_name: "New sole",
              common_name: "Newage Sole",
              year: 2021,
              south_boundary: 43,
              north_boundary: 23},
             {grouping_name: "Groundfish forever",
              common_name: "British Groundfish",
              year: 2021}]
    GroupingData:
      type: object
      required:
        - update_data
      properties:
        update_data:
          type: array
          items:
            type: object
            properties:
              grouping_name:
                type: string
          example:
            [{grouping_name: "English sole"},
             {grouping_name: "Groundfish unid"}]
    Report1Data:
      type: array
      items:
        type: object
        properties:
          permit_number:
            type: string
          permit_year:
            type: integer
          grouping_name:
            type: string
          common_name:
            type: string
          total_catch_mt:
            type: number
            format: float
          min_depth_ftm:
            type: integer
          max_depth_ftm:
            type: integer
          percent_released_at_depth:
            type: number
            format: float
          delivery_date:
            type: string
          mortality_estimate:
            type: number
            format: float
    ReportWCRData:
      type: array
      items:
        type: object
        properties:
          permit_number:
            type: string
          permit_year:
            type: integer
          org_name:
            type: string
          project_name:
            type: string
          principle_investigator:
            type: string
          pi_email:
            type: string
          start_date:
            type: string
          end_date:
            type: string
          delivery_status:
            type: string
          delivery_date:
            type: string     
    CatchData:
      type: array
      items:
        type: object
        properties:
          catch_id:
            type: integer
          grouping_name:
            type: string
          common_name:
            type: string
          total_catch_mt:
            type: number
            format: float
          depth_bin:
            type: string
          percent_released_at_depth:
            type: string
          notes:
            type: string
          research_project_id:
            type: integer
    PermitsData:
      type: object
      properties:
        permit_number:
          type: string
        organization_name:
          type: string
        project_name:
          type: string
        permit_year:
          type: integer
        start_date:
          type: string
        end_date:
          type: string
        mortality_credits_applicable:
          type: boolean
        point_of_contact:
          type: string
        data_status:
          type: string
        delivery_date:
          type: string
        issued_by:
          type: string
        principle_investigator:
          type: string
        notes:
          type: string
        staff_notes:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              status:
                type: integer
                format: int64
              message:
                type: string
          examples:
            Malformed:
              value:
                status: 401
                message: 'jwt malformed'
              summary: 'JWT malformed'
            Expired:
              value:
                status: 401
                message: 'jwt expired'
              summary: 'JWT lifetime expired'
            InvalidSignature:
              value:
                status: 401
                message: 'invalid signature'
              summary: 'JWT signed with different private key'
            InsufficientPrivs:
              value:
                status: 401
                message: 'Insufficient role privileges'
              summary: 'User does not have required role'